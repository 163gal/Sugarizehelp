<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
	<head>
		<title>ActivitiesGuideSugar_es (en)</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<!--
		<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="WebRss.html" />
		-->
		<link rel="icon" href="/floss_translate/publish/ActivitiesGuideSugar_es/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" /> <link rel="shortcut icon" href="/floss_translate/publish/ActivitiesGuideSugar_es/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" />
		<link rel=StyleSheet href="/floss_translate/publish/ActivitiesGuideSugar_es/rsrc/TWiki/FlossSkin2/typography.css" type="text/css" media="screen">
<style>
#index {
	 color:  #ff7f00;
	 font-family: trebuchet,sans-serif;
	 font-size: 10px;
	 line-height:11px;
}
#index UL {
	 width: 159px;
	 list-style-type: None;
	 padding-left: 0px;
	 border: 14px solid #ff7f00;
	 background-color: #ff7f00;
	 margin: 0px 0px 0px 0px;
  }
#index  LI {
	 padding-left: 0px;
	 padding-right: 10px;
	 padding-top: 4px;
	 padding-bottom: 4px;
	 color: #ffffff;
	 margin: 0px 0px 0px 0px;
	 background-color: #ff7f00;
	 border-top: 1px solid #ff7f00;
  }
#index LI:hover {
  background-color: #F99B1C;
}
#index  LI.heading {
	 background-color: #ff7f00;
	 color: #000000;
	 border-top:1px solid #FFE5CC;
	 padding-top: 7px;
	 font-weight: bold;
}
#index  LI.title {
	 border-bottom: 2px solid #FFE5CC;
	 background-color: #ff7f00;
	 color: #FBF4E9;
	 font-weight: bolder;
	 font-size:16px;
	 line-height:18px;
	 padding-bottom: 40px;
  }
#index A {
	 text-decoration: none;
	 color:  #FBF4E9;
	 font-weight: bold;
}
#ds-layout .imgcontainer {
	position:relative;
	}
#ds-layout .caption {
	position:relative;
	bottom:1;
	left:0;
	text-align:center;
	background:#ffe7cb;
	width:100%;
	opacity:.75;
	filter:alpha(opacity=85);
	color:#000;
	font-style: italic;
	 	font-size: 9px;
	line-height:11px;
	}
</style>
<script type="text/javascript">
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
	 window.onload = func;
  } else {
	 window.onload = function() {
		oldonload();
		func();
	 }
  }
}

function insertAfter(newElement,targetElement) {
  var parent = targetElement.parentNode;
  if (parent.lastChild == targetElement) {
	 parent.appendChild(newElement);
  } else {
	 parent.insertBefore(newElement,targetElement.nextSibling);
  }
}

function captionizeImages() {
  if (!document.getElementsByTagName) return false;
  if (!document.createElement) return false;
  var images = document.getElementsByTagName("img");
  if (images.length < 1) return false; 
  for (var i=0; i<images.length; i++) {
	 if (images[i].className != "non") {
		var title = images[i].getAttribute("title");
		var width = images[i].width;
		var divCaption = document.createElement("div");
		divCaption.className="caption";
		divCaption.style.width=width+'px';
		if (title) divCaption.style.padding='2px 0px 3px 0px';
		divCaption.style.display='block';
		var divCaption_text = document.createTextNode(title);
		divCaption.appendChild(divCaption_text);
		var divContainer = document.createElement("div");
		divContainer.className="imgcontainer";
		if (title) divContainer.style.padding='0px 0px 10px 0px';
		images[i].parentNode.insertBefore(divContainer,images[i]);
		divContainer.appendChild(images[i]);
		insertAfter(divCaption,images[i]);
	 }
  }
}
//addLoadEvent(captionizeImages);
</script>
	</head>
	<body  background="/floss_translate/publish/ActivitiesGuideSugar_es/rsrc/TWiki/FlossSkin2/background.gif" style="margin:0;color:#000000;">
<div id="home" style="position:absolute;left:0px;top:10px;">
<a href="/"><img src="/floss_translate/publish/ActivitiesGuideSugar_es/rsrc/TWiki/FlossSkin2/top_read_back.gif" border="0"></a>
</div>
<div id="index" style="position:absolute;left:0px;top:150px;">
<ul>
<li class="title">HAGA LAS ACTIVIDADES</li><li class="heading">ACTIVIDADES DE SUGAR</li><li><a href="Introduction">INTRODUCCIÓN</a></li><li><a href="WhatIsSugar">¿QUÉ ES SUGAR?</a></li><li><a href="WhatisanActivity">¿QUÉ ES UNA ACTIVIDAD DE SUGAR?</a></li><li><a href="NeedtoKnowWriteSugarActivity">¿QUÉ NECESITO SABER PARA ESCRIBIR UNA ACTIVIDAD DE SUGAR?</a></li><li class="heading">PROGRAMACIÓN</li><li><a href="SetUpDevEnvironment">PUESTA EN FUNCIONAMIENTO DE UN AMBIENTE DE DESARROLLO</a></li><li><a href="CreateFirstActivity">CREACIÓN DE SU PRIMERA ACTIVIDAD</a></li><li><a href="StandalonePythonReadEtexts">UN PROGRAMA INDEPENDIENTE DE PYTHON PARA LEER ETEXTS</a></li><li><a href="InheritFromActivity">HEREDE DE SUGAR.ACTIVITY.ACTIVITY</a></li><li><a href="PackageTheActivity">PAQUETE DE LA ACTIVIDAD</a></li><li><a href="AddRefinements">AGREGUE LOS REFINAMIENTOS</a></li><li><a href="UsingVersionControl">AGREGUE SU CÓDIGO DE LA ACTIVIDAD AL CONTROL DE VERSIÓN</a></li><li><a href="GoingInternationalWithPootle">INTERNACIONALIZACIÓN CON POOTLE</a></li><li><a href="DistributeYourActivity">DISTRIBUIR SU ACTIVIDAD</a></li><li><a href="SugarDebugging">DEPURACIÓN DE ACTIVIDADES DE SUGAR</a></li><li class="heading">ASUNTOS AVANZADOS</li><li><a href="SugarCollaboration">CREANDO ACTIVIDADES COMPARTIDAS</a></li><li><a href="TextToSpeech">AGREGANDO TEXTO A VOZ</a></li><li><a href="FunWithTheJournal">DIVERSIÓN CON EL DIARIO</a></li><li><a href="ActivitiesUsingPyGame">CREACIÓN DE ACTIVIDADES USANDO PYGAME</a></li><li><a href="NewStyleToolbars">CREACIÓN DE NUEVAS BARRAS DE HERRAMIENTAS DE ESTILO</a></li>
<li class="heading">TUTORIALES</li><li><a href="QueSeNecesita">¿QUÉ SE NECESITA SABER?</a></li><li><a href="Tuto1">CREACIÓN DE UNA ACTIVIDAD</a></li>
<li class="heading">APÉNDICE</li><li><a href="MoreReading">¿ADÓNDE IR DESDE AQUÍ?</a></li><li><a href="Glossary">GLOSSARIO</a></li><li><a href="AboutTheAuthors">ACERCA DE LOS AUTORES</a></li></ul>
</div>
<div id="pdf" style="position:absolute;left:13px;top:190px;">
<a href="/ActivitiesGuideSugar_es/FM_ActivitiesGuideSugar_es_03Nov10.pdf"><img class ="non" src="/floss_translate/publish/ActivitiesGuideSugar_es/rsrc/TWiki/FlossSkin2/makepdf.gif" border=0></a>
<a href="/ActivitiesGuideSugar_es/print"><img class="non" src="/floss_translate/publish/ActivitiesGuideSugar_es/rsrc/TWiki/FlossSkin2/viewprint.gif" border=0></a>
</div>
		<div style="position:absolute;left:240px;top:11px;">
		<table id="ds-layout" cellpadding="0" cellspacing="0" summary="" style="table-layout:fixed;width:670px;border: 5px solid #666666;padding-right: 0px;padding-left: 0px;padding-bottom: 0px;padding-top: 0px;margin-left : 10px;margin-top:10;background:#FFF7F0;">
			<tr>
			<td width=100%>
			<div class="ds-contentcontainer">
			<div style="margin-left:1.2em;">
			<br>
			<div class="huh" style='decoration:none;color:black;border:1;position:absolute;top:30px;left:500px;'>
			<a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar_es/ActivitiesUsingPyGame' onClick="alert('You will now be forwarded to the FLOSS Manuals editing interface')"><b><font color=#ff7f00><small>Edit this page</small></font></b></a> :: <a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar_es/FMComments?skin=floss2'><b><font color=#ff7f00><small>Discussion</small></font></b></a>
			</div>
			<h1>Creación de una actividad- modo fácil
</h1>

<pre>Objetivo
Se buscó responder a las siguientes interrogantes:

    * ¿Es posible instalar aplicaciones propias en las XO del Plan Ceibal como un usuario común?
    * ¿Cómo se empaqueta una aplicación para ser instalada en la XO?
    * ¿Cómo se define el icono de una aplicación para que aparezca igual que el resto de las actividades?
    * ¿Existe alguna forma fácil e independiente de distribuir nuestras aplicaciones entre los niños?

Estructura básica de una actividad
Al iniciar Sugar, las aplicaciones (actividades en la nomenclatura de OLPC) se buscan en dos directorios:

    * /usr/share/activities
    * /home/olpc/activities

El primero de ellos no puede ser modificado por el usuario; es necesario tener password de root, que en las laptops de OLPC no es conocido por el usuario. El usuario por defecto es llamado olpc, entonces el segundo directorio de la lista es el directorio home del usuario en el cual sí se pueden escribir y modificar archivos. Es en este último donde se pueden instalar las actividades que el usuario desee.
Usaremos como ejemplo una actividad de nombre Prueba. Las actividades se instalan en una estructura de directorios (debajo del directorio /home/olpc/activities/) como la que sigue:

Prueba.activity/
Prueba.activity/prueba.py
Prueba.activity/setup.py
Prueba.activity/activity/
Prueba.activity/activity/activity.info
Prueba.activity/activity/activity-prueba.svg

Donde:

    * prueba.py contiene el código principal de la actividad definido dentro de una clase en Python, pudiendo haber otros archivos con más código en el mismo directorio
    * setup.py contiene un código muy simple que sirve para que Sugar realice la instalación de la actividad
    * activity/activity.info es un archivo de texto que contiene la información básica de la actividad
    * activity/activity-prueba.svg es el icono de la actividad

A continuación se describe en mayor detalle cada uno de estos archivos.
prueba.py
Este archivo contiene el código principal de la actividad, que debe formar parte de una clase que hereda de sugar.activity.Activity. A continuación se muestra un ejemplo de cómo hacer esto.

# prueba.py
# ejemplo de como escribir la clase principal de la actividad
from sugar.activity import activity
class prueba(activity.Activity):
    def __init__(self,handle):
        activity.Activity.__init__(self,handle)
        # aca va el codigo de la aplicacion
# fin de prueba.py

En este ejemplo vemos:

   1. se importa la clase activity de la biblioteca sugar
   2. se define una clase prueba que hereda de activity.Activity
   3. en el constructor de dicha clase se llama al constructor de la clase madre (esto es típico de Python, el constructor debe ser llamado explícitamente)

 setup.py
Este archivo es utilizado por Sugar para inicializar la actividad. El código debe ser el siguiente.

# setup.py
from sugar.activity import bundlebuilder
bundlebuilder.start()
# fin de setup.py

 activity/activity.info
En este archivo de texto se define el nombre de la actividad, el icono a ser utilizado por Sugar y el nombre de la clase que debe ser llamada para ejecutar la actividad, entre otras cosas.

[Activity]
name = Prueba
activity_version = 1
host_version = 1
bundle_id = uy.edu.fing.geirea.prueba
icon = activity-prueba
class = prueba.prueba
show_launcher = yes

Los campos contenidos en este archivo son:

   1. name: el nombre de la actividad tal como debe aparecer cuando se pone el puntero del ratón sobre el icono en la interfaz Sugar
   2. activity_version: numero de versión de la actividad, en principio puede ser un entero asignado en forma secuencial
   3. host_version: version de Sugar para la cual la aplicación fue desarrollada
   4. bundle_id: nombre de identificación de la actividad, deberí ser único por lo que se recomienda usar el nombre de dominio escrito de forma inversa (en este caso es la actividad prueba desarrollada por geirea en fing.edu.uy)
   5. icon: este es el nombre del archivo svg que contiene el icono (la extensión svg no se pone)
   6. class: el nombre de la clase para ejecutar la actividad (en este caso es la clase prueba en el archivo prueba.py; el archivo va primero sin su extensión seguido de un punto y el nombre de la clase)
   7. show_launcher: el valor yes indica que el icono se debe mostrar en la interfaz Sugar junto con todas las otras aplicaciones

activity/activity-prueba.svg
Este archivo contiene el icono de la actividad en formato svg. Se puede crear con un editor vectorial como por ej. Inkscape. Por más información ver http://wiki.laptop.org/go/Making_SVG_Icons_for_Sugar
Otra forma de hacer un icono sencillo es copiar uno existente y modificarlo a mano. Por ejemplo, se puede copiar el icono de la actividad Terminal de /usr/share/activities/Terminal.activity/activity/activity-terminal.svg
Archivos auxiliares de una actividad
También se recomienda incluir otros archivos, aunque en la práctica se comprobó que no son estrictamente necesarios. Los archivos adicionales son:

Prueba.activity/NEWS
Prueba.activity/TODO
Prueba.activity/MANIFEST
Prueba.activity/locale/
Prueba.activity/po/
Prueba.activity/bin/
Prueba.activity/lib/

Donde

    * NEWS es un archivo de texto donde se deja constancia de las sucesivas revisiones de la actividad, las cosas que se incluyeron, que se modificaron, etc.
    * TODO es un archivo de texto donde se escriben las cosas que quedan pendientes realizar
    * MANIFEST es un archivo de texto que contiene la lista de archivos contenidos en el paquete de la actividad
    * locale/ es un directorio donde se incluye información para traducir la aplicación a distintos idiomas en lo que respecta estrictamente a la interfaz Sugar (en este momento lo único que se traduce es el nombre de la actividad)
    * po/ es un directorio donde se pueden incluir los archivos .po para traducir las cadenas de texto de la actividad a distintos idiomas. Por más información visitar http://wiki.laptop.org/go/PO_files
    * bin/ es un directorio donde pueden ir los archivos ejecutables relacionados con la aplicación
    * lib/ es un directorio donde pueden ir las librerías usadas por la aplicación

Empaquetado de una actividad
El empaquetado de una actividad se conoce con el nombre inglés de bundle. Hay dos tipos de bundles: los de actividades y los de contenidos, llamados activity bundles y content bundles respectivamente. Estos últimos son una colección de documentos accesibles mediante la actividad Browse, que se pueden empaquetar en un único archivo de extensión .xol.
Las activity bundles son las que nos interesan en este momento. Se trata simplemente de archivos zip que contienen todos los archivos y la estructura de directorios descritos más arriba. La extensión de este archivo debe ser cambiada a .xo. La actividad Browse está configurada para descomprimir e instalar automáticamente en el directorio /home/olpc/activities la actividad cuando se baja un archivo con esta extensión.
En las referencias hay algunos scripts que hacen este empaquetado automáticamente. Siendo el procedimiento tan sencillo, parece más razonable entender bien cómo funciona y después si uno desea recurrir a los scripts. De esta forma, se evita una aproximación del tipo caja negra, donde lo que ocurre automáticamente es un misterio, cuando en realidad es algo muy sencillo.
Conclusiones
Se concluye que sí es posible instalar aplicaciones propias en las XO del Plan Ceibal sin necesidad de tener usuario root y sin obstáculos que podrían ser firmas digitales, etc.
La aplicación se instala en el directorio /home/olpc/activities, siguiendo una estructura de directorios sencilla. La rutina principal de la aplicación debe incluirse en un archivo Python, como parte de una clase que hereda de la clase sugar.activitiy.Activity. Se deben además crear una serie de archivos auxiliares con un formato de texto muy sencillo. El icono de la actividad debe ser en formato svg; si se quiere que titile como los iconos de las actividades estándar, se debe retocar el archivo con un editor de texto para definir los colores en concordancia con la interfaz Sugar.
Toda la estructura de directorios se puede empaquetar en formato .zip y renombrar con extensión .xo. Cuando la actividad Browse baja un archivo con dicha extensión de una página web, realiza la descompresión e instala la actividad automáticamente.
Se concluye que es posible entonces empaquetar nuestras actividades, subirlas a una página web, y que después los niños puedan bajarla e instalarla automáticamente.</pre>

			</p></div>
			</div> 
			</td>
			</tr>
		</table>
		</div>
<!-- Piwik -->
<a href="http://piwik.org" title="Web analytics" onclick="window.open(this.href);return(false);">
<script language="javascript" src="http://adam.engagetv.com/piwik/piwik.js" type="text/javascript"></script>
<script type="text/javascript">
<!--
piwik_action_name = '';
piwik_idsite = 1;
piwik_url = 'http://adam.engagetv.com/piwik/piwik.php';
piwik_log(piwik_action_name, piwik_idsite, piwik_url);
//-->
</script>
<!-- /Piwik --> 
</body>
</html>
